Annotations:
@SpringBootApplication - It is an interface.It contains many annotations.@SpringBootConfiguration,@EnableAutoConfiguration ,@ComponentScan
@Component - Object will be created by Spring Container.It should be mentioned above only in class.
@ComponentScan - It will scan the main package and sub package.It allows to create the object.Eligible for the class to create an object.
@Autowired - telling the spring that im passing the object reference in the class.It is used to achieve loosely coupling and injecting the dependency.
				If you are not mentioning Autowired,it will give null pointer exception.
@Primary - To consider one of the beans.
@Qualifier - Gives higher priority to the beans.It will be used only if Primary annotation have.

Spring Container/IOC:
It is responsible for creating object and stored in this container.
It will store the created object.

How to get the object from Spring Container?
ConfigurableApplicationContext context = SpringApplication.run(Iteration1Application.class, args);
context.getBean(GameRunner.class) - To get class object.

BeanFactory:
It will create an object when i call.

ApplicationContext:
Legal initialisation.
It will create an object when SpringApplication.run .

@Component("pacManGame")
 
GameRunner{
@Autowired
@Qualifier("pacManGame")
private GamingCOnsole game;
}


@primary & @Qualifier:
@Primary - it tells spring,"when you find more than one beans that both can be autowired,please use the primary one as your first choose.
@Qualifier- no matter how many beans have found.It will give priority.




maven:
remote repository , local repository - .m2-repository-jars

Let's debug:

application.properties:
logging.level.org.springframework=debug

Auto configuration jar:
It will check the pom.xml file.
main method will call the auto configuration jar.
configuration jar will check with pom.xml file and it will select like for which one need to create objects otherwise it will neglect the object creation.

Ctrl+shift+O -> It will automatically import package / remove unwanted package.

Create new Project:
Add dependency:
Spring web

JDK:
JAX WS library(SOAP)
JAX RS library (REST)

Defaultly spring supports REST services.

Add Spring web starter dependency to create web application with REST services.

Layers in spring boot(Design Principle):
Presentation layer 
Controller layer / web layer
Service layer
Database layer
Database

@Component refers to Spring bean.It is stereotype annotation.Then only componentScan will be scanned and worked.
@Autowired- Pick from container and stored in class.it is field level annotation.

@controller: 
	-Class level annotation.
	-It is used to handling the HTTP requests and return appropriate responses.
	-Spring 4.0 - Introduced RestController annotation.
	
@service:
	-It is used in Service Class.
	-It is used to call the DAO class.

@Repository:
	-It is used in DAO class.
	
@RequestMapping:
	-Handler mapping will call the request mapping from the Dispatcher servlet.
	
@ResponseBody():
	-It should be used in field level.
	-Going to give response only if i give this annotation and the response should be comes from body.
	-It should be define in body if u use controller annotation.If u use @RestController no need to use this ResponseBody annotation.
	

Positive matches will create the object and stored in Spring container.It will be decided by AutoC
onfiguration jar

@GetMapping:
	-It comes in Spring 4.0
	-It can be used instead of RestMapping.
	-No need to specify method type GET and no need to add produces :application/json . because the RestController will defaulty give those.


@PostMapping,@PUTMapping etc..

fieldInjection,setter injection and constructor injection

class A{

@Autowired //field injection
B b;

@Autowired //constructor injection
public A(B b, C c){
this.b=b;
this.c=c;

@Autowired //setter injection
public void setA(B b){
this.b=b;
}
}

class B{

}

maven build:
project ->right click->run as -> maven build ->projectName->workspace->clean install (code)->apply->run

run configuration->java application->project name->main method class->apply ->run

MyFirstRestService -clone

@Crossorigin :
   -It will allow only have authorization. and mainly for security purpose.
   
 @GetMapping("/course/{id}/{abc}")
public Course getCourseDetails(@pathVariable int id,@pathVariable(value="abc",required=false) String name){

}
@pathVariable:
	-getting the constant variable from the path given by user.
	-to obtain some placeholder from the URI.
	
required="false" means exceptional if required="true" means mandatory.Default required will be true.
@GetMapping("/api")
public ResponseEntity getUserById(RequestParam("id" Long id){
.....
}
@RequestParam:
	
	-to obtain a paramter from the URI
	
@PostMapping:
	-For creating data.
	
@RequestBody:
	-Attaching the value in the body.
	
ResponseEntity:
	-It will be used in Post mapping,Put mapping like that.
	-It will return complete http respone.
	-Include status code,headers and body
	
Post - Creates a resource.
PUT - If the record exists,update else, create a new record.It replaces a resource.It updates and overwrite.
PATCH - update and merge.
GET - read
Delete - delete record.

Idompotent operations produce the same result even when the operation is repeated many times.The result of the 2nd,3rd , and 1,000th repeat of the operation will return exactly the same result as the 1st time.

Idempotent:
Delete - Yes
PUT
GET

Non Idempotent:
POST
PATCH

JDBC - low level API.
Spring Data JPA - High Level API

Spring Boot Starter Web - Rest api 
Spring Boot starter JPA - Talk to database using JPA (There is no need to write queries)
Spring Boot started JDBC - Talk to database using JDBC (we have to write queries) 
Spring Boot Starter security-


Spring Data JPA - Specification(equivalent to Interface),High Level API
Hibernate-Hibernate will write the query for us.

Install java and run jar file
java -jar JAR_NAME.jar

Alternate for Hibernate (Implementation):
EclipseLink
Nucleus

Spring Boot Actuator:(Production ready features)

	-Provides a number of endpoints.
		-beans
		-health
		-metrics


Spring Boot Devtools:
-Increase developer productivity.
_There is no need to restart the server whenever the code changes.

H2 Database:
	Database will be created when the server starts itself and it deleted when the server shuts.It is an caching memory.It's mainly for development and testing purpose.It boosts the development process.It is an in memory database.
	
	To override configurations:
	application.properties
	.yaml/yml
	
	@configuration
	class ConfigurationClass{
	
	}
	
	In Properties file:
	spring.jpa.database-platform=org.hibernate.dialect.H2Dialect  //Hibernate implementations.
	
	
	In Exception:
	@ResponseStatus(HTTPStatus.NOT_FOUND)
	public class userException extends Exception{
	
	}
	
	@ControllerAdvice -Global Exception Handler
	
	@ExceptionHandler(com.uniq......UserNotFoundException.class)
	
	create ExceptionResponse POJO class and use it in Global Exception.
	
	
	public class ExceptionResponse{
	timeStamp,message,details
	}
	
	Learn Spring validations :
	@Valid
	
	@Size
	
	@Past
	
	
	Ramesh sir Git respository:
	Restwebservice_New code
	
	UserResources
	UserDaoService
	Exception
	
	
	hateoas dependency:
		-It provides href link.
		
	spring doc:
		-Tp bring Swagger-ui into our projects.
		
	http:localhost:9090/h2-console //To connect h2 database
	http:localhost:9090/swagger-ui/index.html //Swagger UI
	http:localhost:9090/actuator -To check server health ,metrics
	
	clean install -DSkiptests
	
	Spring Data JPA:
	JDBC API
	Spring JDBC(Reduce boiler plate code and no need to handle Exception). classes like jdbcTemplate and Name
	Hibernate (ORM Framework)--Query Language
	JPA - Java Persistence API (Specifications -It acts like an Interface)
	Spring Data JPA - It is an abstraction layer on top of the JPA.
	
	Database->JDBC->Hibernate->JPA->Spring Data JPA ->Application
	
	spring data JPA >hibernate >session factory >sessionFactory.openSession() to create session object>session.beginTransaction() to create Transaction object > session.save ,commit for save method.
	
	Hibernate:
		-No need to write sql query with the help of hibernate query language.
	
	@Entity
	@Table(name="product")
	public class Product{
	
	@Id
	@GeneratedValue
	private int id;
	
	}
	
	public class HibernateExample{
	main{
	
	
	}
	
	Spring Data JPA:
		-create a repository interface that extends JPARepository.
		
	}
	
	JPA Code:
	Create EntityManagerFactory
	Create Manager
	
	
	class JPA {
	
	}
	
	Interface DataJpA{
	
	}
	
	Spring Data JPA:
		-Entity class create.
		-Repository Interface
		-configuration

@Entity	-	
class Users{
private Integer id;
private String ;

#setter and getter

{

@Repository - It will check the dependency
interface UserRespository){

}

change the configuration in application.proper

interfaces are Pagin And
interface are JPA Repository

interfacce (UserRespository extends JAPRepository<User>{

}

@Id ->It denots primary key.
@GeneratedValue ->Auto increment of value.


spring.jpa.show-sql=true -.To view the hibernate query in Console.
spring.h2.console.enabled=true ->To view the database in browser.
spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS_USER
spring.datasource.driverClassName=org.h2.Drive

spring.jpa.defer-datasource-initialization = true ->Insert the values into the table without checking .

Unit Test cases:
Junit:
	-Mainly for code coverage.
	-Unit Testing framework.
	-It tests runners to execute tests using annotations.
	-Individual units of components are tested.
TDD:Test Driven Development
@Test:
	-Denotes test case.
	
assertEquals(expectedValue,actualValue) ->Return type boolean.
assertTrue(5>2)
assertFalse
assertNotNull
assertNull

@Before:
	-This method will call before going to text case.
	-In before method we can create objects.

@After:
	-After finishing text case, it will trigger.
	
@Ignore:
	Ignore the test case method.
	
Spring-boot-starter-test provides JUnit.

jackson4 library will be in Spring web,actuator,springdoc api.


pom.xml:
	Inside Scope tag ->Insert exclusions tag-> add junit dependency to exclude

javabuild path ->add libraries->Add library->JUnit 5

then right click ->JUnit Test

Mockito:
	-It is a mocking framework.
	-Mocking object (dummy object).
	-It allows to create and configure mock objects.
	-It is an alternative for getting database connection(example).
	
Refer UniqTestCaseDemo from rameshCoderepository

Microservice:
Dependency needed for Spring microservices:
spring cloud configuration
Eureka server

@Table is used to denote the custom table.It is Entity class level annotation.

@Column is used to denote the custom table column.
GenerationType.Sequence will work only in Oracle not in MySQL.
@GeneratedValue(strategy=GenerationType.AUTO):
	-Choose the appropriate strategy based on the database.
	
@GeneratedValue(strategy=GenerationType.Identity):
	-For MySQL database.
	
defer keyword - It is used to stop inserting values before creating table.

Refer Spring data finder methods

JPQL - Java Persistence Query Language.
"select empName from employee"
In which empName is an fieldName and employee is an class name. We should not use database table name and column name.

@Query("select empName from employee",nativeQuery =true):
	-It is used to write Custom Query.
	-Defaultly nativeQuery will be false, but we should use database table name and column name.
	-Query("select firstName from employee")
	
Hibernate Associations:

@OneToOne
@OneToMany
@ManyToOne
@ManyToMany

OneToOne:

class Post{

ManyToOne(Many posts belongs to one user)
private User user;

}
class User{


}

mappedBy or @joinColumn
@JsonIgnore

@GenericGenerator

Refer SpringData_JPA associations,idgenerators,nativeQuery
Refer documents in SpringDocuments


@Configuration--Customizing third party beans
In method level must use @Bean
class AdminService{

}
@value

@value("${propertiesFileKey}")
private String portAddress;

environment-local/dev/stage/prod
@Profile


in application.properties set profiles.active =prod
application-dev.properties //configure your environment setup
application-prod.properties
Profiles-


@PropertySource

Spring security:

spring security username is user (for authentication)
JWT - authorization

RestTemplate/HttpUrlConnection is used to connect from one service to another service.

spring security started dependency
JWT(json web token)
session token / jsessionToken
5 instances - 5 machines

jwt is ussed to handle multiple instances(many ports) , session is used to manage only one instance.

shared cache is used to have session information and it will deliver  to instances.

stickiness : It is used, when the user hits and the request will be go to load balancer and then it goes to one instance and whenever if the user comes it will redirect to same instance.
Loadbalancer:

JWT: value token, which is maintained in client side.(RFC-7519 standard)
session :reference token, which is maintained in server side.

refer official site jwt-Decoded header,payload,verify signature.

header :
	It contains alogirthm and type.
payload:
	information to create token
signature: 
	-base64urlencoded algorithm 
	
Base64Url:
+ will be replaced by - 
/ will be replaced by _
= omitted

create class WebSecurityConfig extends WebSecurityConfigurerAdapter

override configure method

@Configuration
@EnableWebSecurity

JwtRequestFilter extends OncePerRequestFilter

override method doFilterInternal

@CrossOrigin():
	-Cross Origin Resource Sharing
	-security concept that allows restricting the resources implemented in web browsers.
	-prevents the javascript code against different origin.
	-Using crossOrigin ("http:localhost:3000") to allow that is my consumer or use crossOrigin("*")
	
user->onceperRequestFilter->doFilter->

refer rameshUniq /Spring_JWT repository


To add jsp to our project and for configuration
SpringBootServletInitializer
override configure method 
add Tomcat embed jasper ,spring boot starter tomcat add this two dependency manually because embedded tomcat server will not work.

application.properties:
spring.view.prefix:/WEB-INF/jsp/
spring.view.suffix: .jsp

@RequestBody  equals to @ModelAttribute for jsp.

Difference between ModelAndView and RequestBody

Log4j (library):
	-go to pom.xml add spring boot started log4j2
	-exclusion spring-boot-actuator-logging from ----
	-go to resource folder add log4j.xml
	-create MyService class in java.
		private static final Logger logger = LogManager.getLogger(MyService.class)
	-create folder logs->app-info.log,app-debug.log
	
Refer splunk server for log
Refer putty server
	
Spring security:

	create a User bean class extends UserDetails
	create a UserRepository and create a method findByName()
	create s service with class UserDetailsImp implements UserDetailsService and override loadUserByUserName(String username) throws UserNotFoundException
	get jwt api from mvnrepository
	get JJWT-Impl from mvnrepository
	get JJWT-Jackson Extension
	
	token generation and validation:
	 create a service package and create a service class JWTService to generate and validate token
	 
	 search 256 bit key generator to store key. eg asecuritykey
	 
	 create a filter package
	 


By default spring security users UserDetailsService

if we want to use hard code username password use UserDetailsService to login.

otherwise need Authentication Provider.
for authentication provider we need authentication object  (username and password), this object will be verified by Authentication Provider .
